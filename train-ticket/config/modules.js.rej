diff a/train-ticket/config/modules.js b/train-ticket/config/modules.js	(rejected hunks)
@@ -1,7 +1,5 @@
-
-
-const fs = require('fs')
-const path = require('path')
-const paths = require('./paths')
-const chalk = require('react-dev-utils/chalk')
-const resolve = require('resolve')
+const fs = require("fs");
+const path = require("path");
+const paths = require("./paths");
+const chalk = require("react-dev-utils/chalk");
+const resolve = require("resolve");
@@ -15,42 +13,42 @@ function getAdditionalModulePaths(options = {}) {
-	const baseUrl = options.baseUrl
-
-	// We need to explicitly check for null and undefined (and not a falsy value) because
-	// TypeScript treats an empty string as `.`.
-	if (baseUrl == null) { 
-		// If there's no baseUrl set we respect NODE_PATH
-		// Note that NODE_PATH is deprecated and will be removed
-		// in the next major release of create-react-app.
-
-		const nodePath = process.env.NODE_PATH || ''
-		return nodePath.split(path.delimiter).filter(Boolean)
-	}
-
-	const baseUrlResolved = path.resolve(paths.appPath, baseUrl)
-
-	// We don't need to do anything if `baseUrl` is set to `node_modules`. This is
-	// the default behavior.
-	if (path.relative(paths.appNodeModules, baseUrlResolved) === '') {
-		return null
-	}
-
-	// Allow the user set the `baseUrl` to `appSrc`.
-	if (path.relative(paths.appSrc, baseUrlResolved) === '') {
-		return [paths.appSrc]
-	}
-
-	// If the path is equal to the root directory we ignore it here.
-	// We don't want to allow importing from the root directly as source files are
-	// not transpiled outside of `src`. We do allow importing them with the
-	// absolute path (e.g. `src/Components/Button.js`) but we set that up with
-	// an alias.
-	if (path.relative(paths.appPath, baseUrlResolved) === '') {
-		return null
-	}
-
-	// Otherwise, throw an error.
-	throw new Error(
-		chalk.red.bold(
-			"Your project's `baseUrl` can only be set to `src` or `node_modules`." +
-				' Create React App does not support other values at this time.'
-		)
-	)
+  const baseUrl = options.baseUrl;
+
+  // We need to explicitly check for null and undefined (and not a falsy value) because
+  // TypeScript treats an empty string as `.`.
+  if (baseUrl == null) {
+    // If there's no baseUrl set we respect NODE_PATH
+    // Note that NODE_PATH is deprecated and will be removed
+    // in the next major release of create-react-app.
+
+    const nodePath = process.env.NODE_PATH || "";
+    return nodePath.split(path.delimiter).filter(Boolean);
+  }
+
+  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);
+
+  // We don't need to do anything if `baseUrl` is set to `node_modules`. This is
+  // the default behavior.
+  if (path.relative(paths.appNodeModules, baseUrlResolved) === "") {
+    return null;
+  }
+
+  // Allow the user set the `baseUrl` to `appSrc`.
+  if (path.relative(paths.appSrc, baseUrlResolved) === "") {
+    return [paths.appSrc];
+  }
+
+  // If the path is equal to the root directory we ignore it here.
+  // We don't want to allow importing from the root directly as source files are
+  // not transpiled outside of `src`. We do allow importing them with the
+  // absolute path (e.g. `src/Components/Button.js`) but we set that up with
+  // an alias.
+  if (path.relative(paths.appPath, baseUrlResolved) === "") {
+    return null;
+  }
+
+  // Otherwise, throw an error.
+  throw new Error(
+    chalk.red.bold(
+      "Your project's `baseUrl` can only be set to `src` or `node_modules`." +
+        " Create React App does not support other values at this time."
+    )
+  );
@@ -65 +63 @@ function getWebpackAliases(options = {}) {
-	const baseUrl = options.baseUrl
+  const baseUrl = options.baseUrl;
@@ -67,3 +65,3 @@ function getWebpackAliases(options = {}) {
-	if (!baseUrl) {
-		return {}
-	}
+  if (!baseUrl) {
+    return {};
+  }
@@ -71 +69 @@ function getWebpackAliases(options = {}) {
-	const baseUrlResolved = path.resolve(paths.appPath, baseUrl)
+  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);
@@ -73,5 +71,5 @@ function getWebpackAliases(options = {}) {
-	if (path.relative(paths.appPath, baseUrlResolved) === '') {
-		return {
-			src: paths.appSrc,
-		}
-	}
+  if (path.relative(paths.appPath, baseUrlResolved) === "") {
+    return {
+      src: paths.appSrc
+    };
+  }
@@ -86 +84 @@ function getJestAliases(options = {}) {
-	const baseUrl = options.baseUrl
+  const baseUrl = options.baseUrl;
@@ -88,3 +86,3 @@ function getJestAliases(options = {}) {
-	if (!baseUrl) {
-		return {}
-	}
+  if (!baseUrl) {
+    return {};
+  }
@@ -92 +90 @@ function getJestAliases(options = {}) {
-	const baseUrlResolved = path.resolve(paths.appPath, baseUrl)
+  const baseUrlResolved = path.resolve(paths.appPath, baseUrl);
@@ -94,5 +92,5 @@ function getJestAliases(options = {}) {
-	if (path.relative(paths.appPath, baseUrlResolved) === '') {
-		return {
-			'src/(.*)$': '<rootDir>/src/$1',
-		}
-	}
+  if (path.relative(paths.appPath, baseUrlResolved) === "") {
+    return {
+      "src/(.*)$": "<rootDir>/src/$1"
+    };
+  }
@@ -102,37 +100,37 @@ function getModules() {
-	// Check if TypeScript is setup
-	const hasTsConfig = fs.existsSync(paths.appTsConfig)
-	const hasJsConfig = fs.existsSync(paths.appJsConfig)
-
-	if (hasTsConfig && hasJsConfig) {
-		throw new Error(
-			'You have both a tsconfig.json and a jsconfig.json. If you are using TypeScript please remove your jsconfig.json file.'
-		)
-	}
-
-	let config
-
-	// If there's a tsconfig.json we assume it's a
-	// TypeScript project and set up the config
-	// based on tsconfig.json
-	if (hasTsConfig) {
-		const ts = require(resolve.sync('typescript', {
-			basedir: paths.appNodeModules,
-		}))
-		config = ts.readConfigFile(paths.appTsConfig, ts.sys.readFile).config
-		// Otherwise we'll check if there is jsconfig.json
-		// for non TS projects.
-	} else if (hasJsConfig) {
-		config = require(paths.appJsConfig)
-	}
-
-	config = config || {}
-	const options = config.compilerOptions || {}
-
-	const additionalModulePaths = getAdditionalModulePaths(options)
-
-	return {
-		additionalModulePaths: additionalModulePaths,
-		webpackAliases: getWebpackAliases(options),
-		jestAliases: getJestAliases(options),
-		hasTsConfig,
-	}
+  // Check if TypeScript is setup
+  const hasTsConfig = fs.existsSync(paths.appTsConfig);
+  const hasJsConfig = fs.existsSync(paths.appJsConfig);
+
+  if (hasTsConfig && hasJsConfig) {
+    throw new Error(
+      "You have both a tsconfig.json and a jsconfig.json. If you are using TypeScript please remove your jsconfig.json file."
+    );
+  }
+
+  let config;
+
+  // If there's a tsconfig.json we assume it's a
+  // TypeScript project and set up the config
+  // based on tsconfig.json
+  if (hasTsConfig) {
+    const ts = require(resolve.sync("typescript", {
+      basedir: paths.appNodeModules
+    }));
+    config = ts.readConfigFile(paths.appTsConfig, ts.sys.readFile).config;
+    // Otherwise we'll check if there is jsconfig.json
+    // for non TS projects.
+  } else if (hasJsConfig) {
+    config = require(paths.appJsConfig);
+  }
+
+  config = config || {};
+  const options = config.compilerOptions || {};
+
+  const additionalModulePaths = getAdditionalModulePaths(options);
+
+  return {
+    additionalModulePaths: additionalModulePaths,
+    webpackAliases: getWebpackAliases(options),
+    jestAliases: getJestAliases(options),
+    hasTsConfig
+  };
@@ -141 +139 @@ function getModules() {
-module.exports = getModules()
+module.exports = getModules();
