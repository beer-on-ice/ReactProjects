diff a/train-ticket/config/env.js b/train-ticket/config/env.js	(rejected hunks)
@@ -1 +0,0 @@
-'use strict'
@@ -3,3 +2,4 @@
-const fs = require('fs')
-const path = require('path')
-const paths = require('./paths')
+
+const fs = require("fs");
+const path = require("path");
+const paths = require("./paths");
@@ -8 +8 @@ const paths = require('./paths')
-delete require.cache[require.resolve('./paths')]
+delete require.cache[require.resolve("./paths")];
@@ -10 +10 @@ delete require.cache[require.resolve('./paths')]
-const NODE_ENV = process.env.NODE_ENV
+const NODE_ENV = process.env.NODE_ENV;
@@ -12,3 +12,3 @@ if (!NODE_ENV) {
-	throw new Error(
-		'The NODE_ENV environment variable is required but was not specified.'
-	)
+  throw new Error(
+    "The NODE_ENV environment variable is required but was not specified."
+  );
@@ -19,8 +19,8 @@ const dotenvFiles = [
-	`${paths.dotenv}.${NODE_ENV}.local`,
-	`${paths.dotenv}.${NODE_ENV}`,
-	// Don't include `.env.local` for `test` environment
-	// since normally you expect tests to produce the same
-	// results for everyone
-	NODE_ENV !== 'test' && `${paths.dotenv}.local`,
-	paths.dotenv,
-].filter(Boolean)
+  `${paths.dotenv}.${NODE_ENV}.local`,
+  `${paths.dotenv}.${NODE_ENV}`,
+  // Don't include `.env.local` for `test` environment
+  // since normally you expect tests to produce the same
+  // results for everyone
+  NODE_ENV !== "test" && `${paths.dotenv}.local`,
+  paths.dotenv
+].filter(Boolean);
@@ -34,8 +34,8 @@ dotenvFiles.forEach(dotenvFile => {
-	if (fs.existsSync(dotenvFile)) {
-		require('dotenv-expand')(
-			require('dotenv').config({
-				path: dotenvFile,
-			})
-		)
-	}
-})
+  if (fs.existsSync(dotenvFile)) {
+    require("dotenv-expand")(
+      require("dotenv").config({
+        path: dotenvFile
+      })
+    );
+  }
+});
@@ -52,6 +52,6 @@ dotenvFiles.forEach(dotenvFile => {
-const appDirectory = fs.realpathSync(process.cwd())
-process.env.NODE_PATH = (process.env.NODE_PATH || '')
-	.split(path.delimiter)
-	.filter(folder => folder && !path.isAbsolute(folder))
-	.map(folder => path.resolve(appDirectory, folder))
-	.join(path.delimiter)
+const appDirectory = fs.realpathSync(process.cwd());
+process.env.NODE_PATH = (process.env.NODE_PATH || "")
+  .split(path.delimiter)
+  .filter(folder => folder && !path.isAbsolute(folder))
+  .map(folder => path.resolve(appDirectory, folder))
+  .join(path.delimiter);
@@ -61 +61 @@ process.env.NODE_PATH = (process.env.NODE_PATH || '')
-const REACT_APP = /^REACT_APP_/i
+const REACT_APP = /^REACT_APP_/i;
@@ -64,25 +64,25 @@ function getClientEnvironment(publicUrl) {
-	const raw = Object.keys(process.env)
-		.filter(key => REACT_APP.test(key))
-		.reduce(
-			(env, key) => {
-				env[key] = process.env[key]
-				return env
-			},
-			{
-				// Useful for determining whether we’re running in production mode.
-				// Most importantly, it switches React into the correct mode.
-				NODE_ENV: process.env.NODE_ENV || 'development',
-				// Useful for resolving the correct path to static assets in `public`.
-				// For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.
-				// This should only be used as an escape hatch. Normally you would put
-				// images into the `src` and `import` them in code to get their paths.
-				PUBLIC_URL: publicUrl,
-			}
-		)
-	// Stringify all values so we can feed into Webpack DefinePlugin
-	const stringified = {
-		'process.env': Object.keys(raw).reduce((env, key) => {
-			env[key] = JSON.stringify(raw[key])
-			return env
-		}, {}),
-	}
+  const raw = Object.keys(process.env)
+    .filter(key => REACT_APP.test(key))
+    .reduce(
+      (env, key) => {
+        env[key] = process.env[key];
+        return env;
+      },
+      {
+        // Useful for determining whether we’re running in production mode.
+        // Most importantly, it switches React into the correct mode.
+        NODE_ENV: process.env.NODE_ENV || "development",
+        // Useful for resolving the correct path to static assets in `public`.
+        // For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.
+        // This should only be used as an escape hatch. Normally you would put
+        // images into the `src` and `import` them in code to get their paths.
+        PUBLIC_URL: publicUrl
+      }
+    );
+  // Stringify all values so we can feed into Webpack DefinePlugin
+  const stringified = {
+    "process.env": Object.keys(raw).reduce((env, key) => {
+      env[key] = JSON.stringify(raw[key]);
+      return env;
+    }, {})
+  };
@@ -90 +90 @@ function getClientEnvironment(publicUrl) {
-	return { raw, stringified }
+  return { raw, stringified };
@@ -93 +93 @@ function getClientEnvironment(publicUrl) {
-module.exports = getClientEnvironment
+module.exports = getClientEnvironment;
